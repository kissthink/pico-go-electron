[
{
	"uri": "/about.html",
	"title": "about",
	"tags": [],
	"description": "",
	"content": " What is pico-go? pigo-go is a standalone (offline) gamedev tool using Go. It is for developing simple games / demos like the pico8 console but instead of coding in Lua you use Go.\nWhy did I build it? I spend quite a while sitting on trains to and from work and during my commute I normally entertain myself by tinkering away at code.\nEver since I was young I\u0026rsquo;ve enjoyed developing games and graphical demos. I cut my teeth coding on ZX Spectrum and Commodore 64 many moons ago and got the mug. I was a very small part of the demoscene and that love of developing that kind of code never died.\nI have developed and abandon too many projects to list. Often they start small and beautiful and then my ambitions get carried away and the balloon into something too large. Real-life then catches up with me and I get distracted, never to return again.\nThen a few years ago I discovered the pico8 fantasy console.\n#\n"
},
{
	"uri": "/example/demo-01.html",
	"title": "demo-01",
	"tags": [],
	"description": "",
	"content": " demo-01 This is a simple project to demonstrate how to develop using pico-go.\nexample output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;image/color\u0026#34; \u0026#34;github.com/hajimehoshi/ebiten\u0026#34; \u0026#34;github.com/hajimehoshi/ebiten/ebitenutil\u0026#34; ) const ( // define these vars to be used in javascript canvas scaling code \tscreenWidth = 320 screenHeight = 240 ) var blue = color.RGBA{R: 33, G: 174, B: 255, A: 255} // update - this method is called 60 time a second func update(screen *ebiten.Image) error { // this is here to skip frames when things struggle \tif ebiten.IsRunningSlowly() { return nil } // screen screen with Gopher color \tscreen.Fill(blue) // show some frame rate text to impress your friends \tebitenutil.DebugPrint(screen, fmt.Sprintf(\u0026#34;FPS: %f\u0026#34;, ebiten.CurrentFPS())) return nil } func main() { // run app \tif err := ebiten.Run(update, screenWidth, screenHeight, 1, \u0026#34;pico-go (demo project)\u0026#34;); err != nil { log.Fatal(err) } } "
},
{
	"uri": "/dev-doc.html",
	"title": "dev docs",
	"tags": [],
	"description": "",
	"content": " Getting started blah blah.\n"
},
{
	"uri": "/example.html",
	"title": "examples",
	"tags": [],
	"description": "",
	"content": " Examples These are short code examples of how to use pico-go.\n"
},
{
	"uri": "/example/ebiten.html",
	"title": "ebiten",
	"tags": [],
	"description": "",
	"content": "You can use most of the ebiten examples too.\nHere is an example of the flappy.go demo\nJust trying opening a file from $GOPATH/src/github.com/hajimehoshi/ebiten/examples\nThe only code you may need to change is the scale factor when running ebiten. Set the value to 1 instead of 2 on some of the demos and we\u0026rsquo;ll handle the scaling for you.\nfunc main() { if err := ebiten.Run(update, screenWidth, screenHeight, 2, \u0026#34;(Demo)\u0026#34;); err != nil { log.Fatal(err) } } If your code has variables or constants called screenWidth and screenHeight these will be used to maintain aspect ratio when the window is resized.\n"
},
{
	"uri": "/",
	"title": "index",
	"tags": [],
	"description": "",
	"content": "Welcome to pico-go the game and demoscene development tool for Go developers.\nPowered by hugo\n"
},
{
	"uri": "/_footer.html",
	"title": "",
	"tags": [],
	"description": "",
	"content": "pico-go docs\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]