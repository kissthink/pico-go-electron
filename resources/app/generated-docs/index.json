[
{
	"uri": "/about.html",
	"title": "about",
	"tags": [],
	"description": "",
	"content": " What is pico-go? pigo-go is a standalone (offline) gamedev tool using Go. It is for developing simple games / demos like the pico8 console but instead of coding in Lua you use Go.\nWhy did I build it? I spend quite a while sitting on trains to and from work and during my commute I normally entertain myself by tinkering away at code.\nEver since I was young I\u0026rsquo;ve enjoyed developing games and graphical demos. I cut my teeth coding on ZX Spectrum and Commodore 64 many moons ago and got the mug. I was a very small part of the demoscene and that love of developing that kind of code never died.\nI have developed and abandon too many projects to list. Often they start small and beautiful and then my ambitions get carried away and the balloon into something too large. Real-life then catches up with me and I get distracted, never to return again.\nThen a few years ago I discovered the pico8 fantasy console.\n#\n"
},
{
	"uri": "/example/demo-01/demo-01.html",
	"title": "demo-01",
	"tags": [],
	"description": "",
	"content": " demo-01 This is a simple project to demonstrate how to develop using pico-go.\nexample output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; const ( // set console type to one of the predefined consoles \tconsoleType = console.PICO8 // define these vars to be used in javascript canvas scaling code \tscreenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.BaseCartridge } // Init - called once func (c *cartridge) Init() error { console.ShowFPS() return nil } // Update - called once every frame func (c *cartridge) Update() { } // Render - called once every frame func (c *cartridge) Render() { c.Cls(console.PICO8_BLUE) c.PrintAt(\u0026#34;Hello\u0026#34;, 10, 20) } "
},
{
	"uri": "/dev-doc.html",
	"title": "dev docs",
	"tags": [],
	"description": "",
	"content": " Getting started blah blah.\n"
},
{
	"uri": "/example/drawing/drawing.html",
	"title": "drawing",
	"tags": [],
	"description": "",
	"content": " drawing This is a simple project to demonstrate how to use the drawing functions.\nexample output sourcecode package main /* This is a project to demo the drawing primitives Copyright 2018 @telecoda */ import ( \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; ) const ( // set console type to one of the predefined consoles \tconsoleType = console.PICO8 ) type cartridge struct { *console.BaseCartridge } // Init - called once when cart is initialised func (c *cartridge) Init() error { return nil } // Update - called once every frame func (c *cartridge) Update() { } // Render - called once every frame func (c *cartridge) Render() { c.Cls(console.PICO8_BLACK) c.PrintAt(\u0026#34;DRAWING:\u0026#34;, 50, 5, console.PICO8_WHITE) c.Line(0, 12, 128, 12, console.PICO8_WHITE) c.PrintAt(\u0026#34;RECTS:\u0026#34;, 10, 32, console.PICO8_WHITE) c.Rect(45, 30, 55, 40) c.SetColor(console.PICO8_GREEN) c.RectFill(65, 30, 75, 40) c.RectFill(85, 25, 105, 45, console.PICO8_RED) c.PrintAt(\u0026#34;CIRCLE:\u0026#34;, 10, 55, console.PICO8_WHITE) c.Circle(50, 57, 5) c.SetColor(console.PICO8_BLUE) c.CircleFill(70, 57, 5) c.CircleFill(95, 57, 10, console.PICO8_BROWN) c.PrintAt(\u0026#34;LINES:\u0026#34;, 10, 77, console.PICO8_WHITE) c.SetColor(console.PICO8_LIGHT_GRAY) c.Line(45, 77, 105, 77) c.Line(45, 79, 105, 79, console.PICO8_YELLOW) c.PrintAt(\u0026#34;POINTS:\u0026#34;, 10, 99, console.PICO8_WHITE) c.PSet(50, 99) c.PSet(70, 99, console.PICO8_PINK) // get color of point // earlier rect \tpointColor := c.PGet(85, 25) c.PSet(95, 99, pointColor) } "
},
{
	"uri": "/example/palette/palette.html",
	"title": "palette",
	"tags": [],
	"description": "",
	"content": " palette This is a simple project to demonstrate how to use the palette functions.\nexample output sourcecode package main import ( \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; ) /* This is a project to demo the palette manipulation Copyright 2018 @telecoda */ const ( // define these vars to be used in javascript canvas scaling code \tscreenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) // Code must implement console.Cartridge interface  type cartridge struct { *console.BaseCartridge // example vars below \tmapAnim bool frameCount int totalFrames int currentColor int } // Init - called once when cart is initialised func (c *cartridge) Init() error { // the Init method receives a PixelBuffer reference \t// hold onto this reference, this is the display that \t// your code will be drawing onto each frame \tc.frameCount = 0 c.totalFrames = 25 c.currentColor = 0 c.mapAnim = false return nil } // Update - called once every frame func (c *cartridge) Update() { c.frameCount++ if c.frameCount \u0026gt; c.totalFrames { // trigger update  if c.mapAnim { c.MapColor(console.ColorID(c.currentColor), console.PICO8_RED) } else { c.SetTransparent(console.ColorID(c.currentColor), true) } // reset counters \tc.frameCount = 0 c.currentColor++ if c.currentColor \u0026gt; 15 { // all colors have been swapped reset \tc.currentColor = 0 c.PaletteReset() c.mapAnim = !c.mapAnim } } } // Render - called once every frame func (c *cartridge) Render() { c.Cls() c.RectFill(0, 0, 32, 32, 0) c.RectFill(32, 0, 64, 32, 1) c.RectFill(64, 0, 96, 32, 2) c.RectFill(96, 0, 128, 32, 3) c.RectFill(0, 32, 32, 64, 4) c.RectFill(32, 32, 64, 64, 5) c.RectFill(64, 32, 96, 64, 6) c.RectFill(96, 32, 128, 64, 7) c.RectFill(0, 64, 32, 96, 8) c.RectFill(32, 64, 64, 96, 9) c.RectFill(64, 64, 96, 96, 10) c.RectFill(96, 64, 128, 96, 11) c.RectFill(0, 96, 32, 128, 12) c.RectFill(32, 96, 64, 128, 13) c.RectFill(64, 96, 96, 128, 14) c.RectFill(96, 96, 128, 128, 15) c.PrintAt(\u0026#34;PALETTE:\u0026#34;, 46, 5, 15) c.Line(0, 12, 128, 12) if c.mapAnim { c.PrintAt(\u0026#34;COLORS CAN BE SWAPPED.\u0026#34;, 20, 20, 15) } else { c.PrintAt(\u0026#34;COLORS CAN BE TRANSPARENT.\u0026#34;, 12, 20, 15) } } "
},
{
	"uri": "/example/sprite/sprite.html",
	"title": "sprites",
	"tags": [],
	"description": "",
	"content": " sprites This is a simple project to demonstrate how to use the sprite functions.\nexample output sourcecode package main /* This is a project to demo the sprite functions Copyright 2018 @telecoda */ import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; ) const ( // define these vars to be used in javascript canvas scaling code \tscreenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) type cartridge struct { *console.BaseCartridge // example vars below \trunning bool rot float64 barY int scaleY float64 scaleX float64 } // Init - called once func (c *cartridge) Init() error { return nil } // Update - called once every frame func (c *cartridge) Update() { c.rot += 4 if c.rot \u0026gt; 360 { c.rot = 0 } c.barY += 1 if c.barY \u0026gt; 128 { c.barY = 0 } } // Render - called once every frame func (c *cartridge) Render() { c.Cls(console.PICO8_WHITE) c.RectFill(0, c.barY, 128, c.barY+48, console.PICO8_LIGHT_GRAY) c.MapColor(console.PICO8_BLUE, console.PICO8_WHITE) c.PrintAt(\u0026#34;SPRITES:\u0026#34;, 50, 5, console.PICO8_BLACK) c.Line(0, 12, 128, 12) c.PrintAt(\u0026#34;SPRITE:\u0026#34;, 10, 20, console.PICO8_BLACK) c.Sprite(0, 56, 16, 2, 2, 16, 16) c.PrintAt(\u0026#34;ROTATED:\u0026#34;, 10, 45, console.PICO8_BLACK) c.PrintAt(fmt.Sprintf(\u0026#34;%d\u0026#34;, int(c.rot)), 80, 45, console.PICO8_BLACK) c.SpriteRotated(0, 56, 41, 2, 2, 16, 16, c.rot) c.PrintAt(\u0026#34;FLIPPED:\u0026#34;, 10, 70, console.PICO8_BLACK) c.SpriteFlipped(2, 56, 66, 2, 2, 16, 16, true, false) c.PrintAt(\u0026#34;X\u0026#34;, 62, 83, console.PICO8_BLACK) c.SpriteFlipped(2, 76, 66, 2, 2, 16, 16, false, true) c.PrintAt(\u0026#34;Y\u0026#34;, 82, 83, console.PICO8_BLACK) c.SpriteFlipped(2, 96, 66, 2, 2, 16, 16, true, true) c.PrintAt(\u0026#34;XY\u0026#34;, 100, 83, console.PICO8_BLACK) c.PrintAt(\u0026#34;SCALED:\u0026#34;, 10, 95, console.PICO8_BLACK) c.Sprite(40, 40, 95, 4, 2, 64, 32) } "
},
{
	"uri": "/example/starfield/starfield.html",
	"title": "starfield",
	"tags": [],
	"description": "",
	"content": " starfield This is a simple project which creates an old skool starfield\nexample output sourcecode package main /* This is a project to demo an oldskool starfield Copyright 2018 @telecoda */ import ( \u0026#34;math/rand\u0026#34; \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; ) const ( // set console type to one of the predefined consoles \tscreenWidth = 128 screenHeight = 128 consoleType = console.CBM64 ) type cartridge struct { *console.BaseCartridge s []int } /* This is the original tweetcart code s={}w=128 r=rnd for i=1,w do s[i]={}p=s[i]p[1]=r(w)end::a::cls()for i=1,w do p=s[i]pset(p[1],i,i%3+5)p[1]=(p[1]-i%3)%w end flip()goto a */ // Init - called once func (c *cartridge) Init() error { // init stars \t/* s={} w=128 r=rnd for i=1,w do s[i]={} p=s[i] p[1]=r(w) end */ w := c.GetWidth() //h := c.GetHeight() \tc.s = make([]int, w, w) for i := 0; i \u0026lt; w; i++ { c.s[i] = rand.Intn(w) } return nil } // Update - called once every frame func (c *cartridge) Update() { } // Render - called once every frame func (c *cartridge) Render() { c.Cls(console.PICO8_BLACK) for i := 0; i \u0026lt; c.GetHeight(); i++ { c.PSet(c.s[i], i, console.ColorID(i%3+5)) c.s[i] = (c.s[i] - (i % 3)) % c.GetWidth() if c.s[i] \u0026lt; 0 { c.s[i] += c.GetWidth() } } } "
},
{
	"uri": "/example/tweetcart/tweetcart.html",
	"title": "tweetcart",
	"tags": [],
	"description": "",
	"content": " tweetcart This is an example of a tweetcart animation. Tweetcarts are animations where the code should be able to fit within the size of a single tweet.\nThis tweetcart is based upon a pico8 tweetcart from here\nexample output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import ( \u0026#34;math\u0026#34; \u0026#34;github.com/telecoda/pico-go-electron/console\u0026#34; ) const ( // set console type to one of the predefined consoles \tconsoleType = console.PICO8 // define these vars to be used in javascript canvas scaling code \tscreenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.BaseCartridge } // Init - called once func (c *cartridge) Init() error { go c.renderLoop() return nil } func (c *cartridge) renderLoop() { /* From this Tweet: https://twitter.com/Gozilu/status/1055212980164587520 t=0 ::_:: cls() t+=.1 for y=-64,64,3 do d=2*(y%2) for x=-64+d,64+d,4 do a=atan2(x,y) r=sqrt(x*x+y*y)/128 c=4*r/sin(r/4+a*2-t/10) circfill(x+64,y+64,2,7+c%7) end end flip() goto _ */ t := 0.0 for { c.Cls() t += 0.1 for y := -64; y \u0026lt; 64; y += 3 { d := 2 * (y % 2) for x := -64 + d; x \u0026lt; 64+d; x += 4 { a := math.Atan2(float64(x)*math.Pi*2, float64(y)*math.Pi*2) r := math.Sqrt(float64(x*x+y*y)) / 128 col := int(4 * r / math.Sin(r/4+a*2-t/10*math.Pi*2)) c.CircleFill(x+64, y+64, 2, console.ColorID(7+col%7)) } } c.Flip() } } // Update - called once every frame func (c *cartridge) Update() { } // Render - called once every frame func (c *cartridge) Render() { } "
},
{
	"uri": "/example.html",
	"title": "examples",
	"tags": [],
	"description": "",
	"content": " Examples These are short code examples of how to use pico-go.\n"
},
{
	"uri": "/",
	"title": "index",
	"tags": [],
	"description": "",
	"content": "Welcome to pico-go the game and demoscene development tool for Go developers.\nPowered by hugo\n"
},
{
	"uri": "/_footer.html",
	"title": "",
	"tags": [],
	"description": "",
	"content": "pico-go docs\n"
},
{
	"uri": "/about/history.html",
	"title": "",
	"tags": [],
	"description": "",
	"content": " pico-go Development history This is where you find out how pico-go (electron) came to be.\nTODO: write this up properly\u0026hellip;.\ngo-game OpenGL\npico8!\npico-go\nThe idea originally started in my pico-go repo but I found the external dependencies too complex/limiting for getting developers quickly productive on multiple platforms.\nOpenGL\n-\u0026gt; ebiten\npico-go-electron\nendless css/js wrangling\ncross platform ballache\nembedded resources in Windows vs filesystem on OSX still need to test on linux\ncalling gopherJS from command line windows pops up console windows - use hide windows param on windows\nusing GopherJS on windows - need to set GOOS=linux to compile to js\nworking out where to put files when compiling - electron userPath\noverriding resize event handlers\nprobably more hilarity will ensue\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]