<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>examples on pico-go documentation</title>
    <link>/example.html</link>
    <description>Recent content in examples on pico-go documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>demo-01</title>
      <link>/example/demo-01/demo-01.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/demo-01/demo-01.html</guid>
      <description>demo-01 This is a simple project to demonstrate how to develop using pico-go.
example output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;github.com/hajimehoshi/ebiten&amp;#34; &amp;#34;github.com/hajimehoshi/ebiten/ebitenutil&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 320 screenHeight = 240 ) var blue = color.</description>
    </item>
    
    <item>
      <title>drawing</title>
      <link>/example/drawing/drawing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/drawing/drawing.html</guid>
      <description>drawing This is a simple project to demonstrate how to use the drawing functions.
example output sourcecode package main /* This is a project to demo the drawing primitives Copyright 2018 @telecoda */ import ( &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.BaseCartridge } // NewCart - initialise a struct implementing Cartridge interface func NewCart() console.</description>
    </item>
    
    <item>
      <title>palette</title>
      <link>/example/palette/palette.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/palette/palette.html</guid>
      <description>palette This is a simple project to demonstrate how to use the palette functions.
example output sourcecode package main import ( &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) /* This is a project to demo the palette manipulation Copyright 2018 @telecoda */ const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 ) // Code must implement console.Cartridge interface  type cartridge struct { *console.</description>
    </item>
    
    <item>
      <title>sprites</title>
      <link>/example/sprite/sprite.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/sprite/sprite.html</guid>
      <description>sprites This is a simple project to demonstrate how to use the sprite functions.
example output sourcecode package main /* This is a project to demo the sprite functions Copyright 2018 @telecoda */ import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.BaseCartridge // example vars below 	running bool rot float64 barY int scaleY float64 scaleX float64 } // NewCart - initialise a struct implementing Cartridge interface func NewCart() console.</description>
    </item>
    
    <item>
      <title>starfield</title>
      <link>/example/starfield/starfield.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/starfield/starfield.html</guid>
      <description>starfield This is a simple project which creates an old skool starfield
example output sourcecode package main /* This is a project to demo an oldskool starfield Copyright 2018 @telecoda */ import ( &amp;#34;math/rand&amp;#34; &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.BaseCartridge s []int } // NewCart - initialise a struct implementing Cartridge interface func NewCart() console.</description>
    </item>
    
    <item>
      <title>ebiten</title>
      <link>/example/ebiten/ebiten.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/ebiten/ebiten.html</guid>
      <description>You can use most of the ebiten examples too.
Here is an example of the flappy.go demo
Just trying opening a file from $GOPATH/src/github.com/hajimehoshi/ebiten/examples
The only code you may need to change is the scale factor when running ebiten. Set the value to 1 instead of 2 on some of the demos and we&amp;rsquo;ll handle the scaling for you.
func main() { if err := ebiten.Run(update, screenWidth, screenHeight, 2, &amp;#34;(Demo)&amp;#34;); err !</description>
    </item>
    
  </channel>
</rss>