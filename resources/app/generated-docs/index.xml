<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>index on pico-go documentation</title>
    <link>/</link>
    <description>Recent content in index on pico-go documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Oct 2018 16:26:07 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>demo-01</title>
      <link>/example/demo-01/demo-01.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/demo-01/demo-01.html</guid>
      <description>demo-01 This is a simple project to demonstrate how to develop using pico-go.
example output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; const ( // set console type to one of the predefined consoles 	consoleType = console.PICO8 // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 ) type cartridge struct { *console.</description>
    </item>
    
    <item>
      <title>drawing</title>
      <link>/example/drawing/drawing.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/drawing/drawing.html</guid>
      <description>drawing This is a simple project to demonstrate how to use the drawing functions.
example output sourcecode package main /* This is a project to demo the drawing primitives Copyright 2018 @telecoda */ import ( &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) type cartridge struct { *console.BaseCartridge } // Init - called once when cart is initialised func (c *cartridge) Init() error { return nil } // Update - called once every frame func (c *cartridge) Update() { } // Render - called once every frame func (c *cartridge) Render() { c.</description>
    </item>
    
    <item>
      <title>palette</title>
      <link>/example/palette/palette.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/palette/palette.html</guid>
      <description>palette This is a simple project to demonstrate how to use the palette functions.
example output sourcecode package main import ( &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) /* This is a project to demo the palette manipulation Copyright 2018 @telecoda */ const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) // Code must implement console.Cartridge interface  type cartridge struct { *console.</description>
    </item>
    
    <item>
      <title>peekpoke</title>
      <link>/example/peekpoke/peekpoke.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/peekpoke/peekpoke.html</guid>
      <description>peekpoke This is a simple project to demonstrate how to use the peek and poke functions.
example output sourcecode package main /* This is a project to demo the peek poke functions Copyright 2018 @telecoda */ import ( &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) type cartridge struct { *console.</description>
    </item>
    
    <item>
      <title>sprites</title>
      <link>/example/sprite/sprite.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/sprite/sprite.html</guid>
      <description>sprites This is a simple project to demonstrate how to use the sprite functions.
example output sourcecode package main /* This is a project to demo the sprite functions Copyright 2018 @telecoda */ import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // define these vars to be used in javascript canvas scaling code 	screenWidth = 128 screenHeight = 128 consoleType = console.PICO8 ) type cartridge struct { *console.BaseCartridge // example vars below 	running bool rot int barY int scaleY float64 scaleX float64 } // Init - called once func (c *cartridge) Init() error { console.</description>
    </item>
    
    <item>
      <title>starfield</title>
      <link>/example/starfield/starfield.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/starfield/starfield.html</guid>
      <description>starfield This is a simple project which creates an old skool starfield
example output sourcecode package main /* This is a project to demo an oldskool starfield Copyright 2018 @telecoda */ import ( &amp;#34;math/rand&amp;#34; &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // set console type to one of the predefined consoles 	screenWidth = 128 screenHeight = 128 consoleType = console.CBM64 ) type cartridge struct { *console.BaseCartridge s []int } /* This is the original tweetcart code s={}w=128 r=rnd for i=1,w do s[i]={}p=s[i]p[1]=r(w)end::a::cls()for i=1,w do p=s[i]pset(p[1],i,i%3+5)p[1]=(p[1]-i%3)%w end flip()goto a */ // Init - called once func (c *cartridge) Init() error { // init stars 	/* s={} w=128 r=rnd for i=1,w do s[i]={} p=s[i] p[1]=r(w) end */ w := c.</description>
    </item>
    
    <item>
      <title>tweetcart</title>
      <link>/example/tweetcart/tweetcart.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/example/tweetcart/tweetcart.html</guid>
      <description>tweetcart This is an example of a tweetcart animation. Tweetcarts are animations where the code should be able to fit within the size of a single tweet.
This tweetcart is based upon a pico8 tweetcart from here
example output sourcecode package main /* This is a simple demo project to show you how to use pico-go Copyright 2018 @telecoda */ import ( &amp;#34;math&amp;#34; &amp;#34;github.com/telecoda/pico-go-electron/console&amp;#34; ) const ( // set console type to one of the predefined consoles 	consoleType = console.</description>
    </item>
    
    <item>
      <title></title>
      <link>/_footer.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/_footer.html</guid>
      <description>pico-go docs</description>
    </item>
    
    <item>
      <title></title>
      <link>/about/history.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/history.html</guid>
      <description>pico-go Development history This is where you find out how pico-go (electron) came to be.
TODO: write this up properly&amp;hellip;.
go-game OpenGL
pico8!
pico-go
The idea originally started in my pico-go repo but I found the external dependencies too complex/limiting for getting developers quickly productive on multiple platforms.
OpenGL
-&amp;gt; ebiten
pico-go-electron
endless css/js wrangling
cross platform ballache
embedded resources in Windows vs filesystem on OSX still need to test on linux</description>
    </item>
    
  </channel>
</rss>